import { Logger, SuccessResponseDto } from '@juicyllama/utils';
import { Repository } from 'typeorm';
import { UsersService } from '../users/users.service';
import { Role } from './role.entity';
import { AccountService } from '../accounts/account.service';
import { SettingsService } from '../settings/settings.service';
import { JwtService } from '@nestjs/jwt';
import { Cache } from 'cache-manager';
import { BaseService } from '../../helpers';
import { Query } from '../../utils/typeorm/Query';
import { BeaconService } from '../beacon/beacon.service';
import { LoginResponseDto } from './dtos/login.dto';
import { UserRole } from '../users/users.enums';
import { User } from '../users/users.entity';
import { Account } from '../accounts/account.entity';
type T = Role;
export declare class AuthService extends BaseService<T> {
    readonly query: Query<T>;
    readonly repository: Repository<T>;
    readonly logger: Logger;
    readonly accountService: AccountService;
    readonly beaconService: BeaconService;
    readonly settingsService: SettingsService;
    readonly usersService: UsersService;
    readonly jwtService: JwtService;
    private cacheManager;
    constructor(query: Query<T>, repository: Repository<T>, logger: Logger, accountService: AccountService, beaconService: BeaconService, settingsService: SettingsService, usersService: UsersService, jwtService: JwtService, cacheManager: Cache);
    assignRole(user: User, account: Account, role: UserRole): Promise<User>;
    login(user: any): Promise<LoginResponseDto>;
    constructLoginPayload(user: any): Promise<{
        email: any;
        user_id: any;
        account_ids: number[];
    }>;
    initiatePasswordReset(data: any): Promise<boolean>;
    completePasswordReset(data: any): Promise<LoginResponseDto>;
    initiatePasswordlessLogin(data: any): Promise<boolean>;
    validateVerificationCode(data: any): Promise<SuccessResponseDto>;
    getValidationCode(user: any): Promise<unknown>;
    validateLoginCodeAndLogin(data: any): Promise<LoginResponseDto>;
    handleUserNotFoundException(user: any): void;
    verificationCodeIsInvalid(verificationCode: any, code: any): boolean;
    sendVerificationCode(user: any, code: any): Promise<void>;
    sendLoginCode(user: any, code: any): Promise<void>;
    generateVerificationCodeAndSavetoRedis(user: any): Promise<unknown>;
    clearUserAuthCache(user: any): Promise<void>;
    isGodUser(user: User): Promise<boolean>;
    getGodUsers(): Promise<User[]>;
    getAccountIds(user: User): Promise<number[]>;
    getUserRole(user_id: any, account_id: any): Promise<any>;
    getRole(user_id: any, account_id: any): Promise<Role>;
    getRoles(user_id: any): Promise<Role[]>;
    check(user_id: number, account_id: number, roles?: UserRole[]): Promise<void>;
    referrerCheck(referrer: any, allowed: any, domain: any): boolean;
    processGodUser(user: any): Promise<any>;
}
export {};
